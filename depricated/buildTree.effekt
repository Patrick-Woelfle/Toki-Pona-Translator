module buildTree

import src/trees
import src/additionalLists
import src/effects


/// Splits Toki Pona Sentences into Syntax Tree
def splitSentence(sentence: List[String]): SyntaxTree = {
  Node2("Sentence", Node1("Subject", Leaf("Noun Phrase", findSubject(sentence))), Node2("VerbPhrase", Leaf("Verb Phrase", findVerb(sentence)), Leaf("Noun Phrase", findObject(sentence))))
}

def splitSentence3(sentence: List[String]): SyntaxTree = {
  var tree: SyntaxTree = Sentence(Empty(), Empty())
  try {
    sentence.findAndRemoveSubjects().findAndRemovePredicates()
    return tree
  } with append { n => 
    append2(tree, n)
    Empty()
    resume(())
    } with Exception[MissingValue] {
      def raise(exception: MissingValue, msg: String) = {
        println(msg)
        return Empty()
    }
  } 
} 


def subjectOnlyMiSina(sentence: List[String]): Bool = {
  sentence match {
    case Cons("mi", Cons("en", _)) => false
    case Cons("mi", notEn) => true
    case Cons("sina", Cons("en", _)) => false
    case Cons("sina", notEn) => true
    case _ => false
  }
}

def findAndRemoveSubjects(sentence: List[String]): List[String] / {append, Exception[MissingValue]} = {
  if (sentence.subjectOnlyMiSina()) {
    do append(ObjectLeaf2("Subject Phrase", "", show(sentence.take(1)), Nil()))
    return sentence.drop(1)
  } else {
    sentence.getIndexOf("li") match {
      case Some(index) => {
        do append(Empty())
        return sentence.drop(index)
        }
      case None() => {
        do append(Empty())
        return sentence.drop(1)
        }
      }
  }
}
  


def findAndRemovePredicates(sentence: List[String]): List[List[String]] / append = {
  return [["a"]]
}

def findAndRemovePrepositions(sentence: List[String]): List[String] / append = {
  <>
}


/// Finds and isolates Verb in Toki Pona Sentence
def findVerb(sentence: List[String]): List[String] = {
  var output = sentence
  output.getIndexOf("li") match {
    case Some(index) => output = output.drop(index + 1) // + 1 to drop the li
    case None() => output = output.drop(1)
  }
  output.getIndexOf("e") match {
    case Some(index) => return output.take(index)
    case None() => return output
  }
}


/// Finds and isolates Object in Toki Pona Sentence
def findObject(sentence: List[String]): List[String] = { // TODO: deal with Prepositions
  sentence.getIndexOf("e") match {
    case Some(index) => return sentence.drop(index + 1) // + 1 to drop the e
    case None() => return Nil()
  }
} 

/// Finds and isolates Subject in Toki Pona Sentence
def findSubject(sentence: List[String]): List[String] = {
  sentence.getIndexOf("li") match {
    case Some(index) => return sentence.take(index)
    case None() => sentence.take(1)
  }
}


def main(): Unit = {
  var t1 = splitSentence3(["mi", "li", "sina", "li", "tawa", "toki", "pona"])
  var t2 = splitSentence3(["a", "li", "sina", "li", "tawa", "toki", "pona"])
  printTree2(Sentence(PhraseList("Subject", ObjectLeaf2("Subject Phrase", "", "mi", Nil()), Empty()), Empty()))
}
