module additionalListFunctions

/// Prints out all elements of a list, with spaces between them
def showSentence(l: List[String]): String = {
  var output: String = ""
  l.foreachIndex{ (index, el) =>
    if (index == 0) output = el
    else output = output ++ " " ++ el
  }
  return output
}


/// Gets all indexes of ocurrences of a string in a list
def getIndexesOf(l:List[String], v: String): List[Int] = {
  try {
    var done: Bool = false
    var index: Int = -1
    var indexes: List[Int] = []
    while (done == false) {
      index = index + 1
      if (l.get[String](index) == v) {
        indexes = indexes.insert(indexes.size, index)
      }
      if (index == l.size - 1) {
        done = true
      }
    }
    return indexes
  } with Exception[OutOfBounds] {
    def raise(exception: OutOfBounds, msg: String) = {
      println(msg)
      return []
    }
  }
}


/// Gets the first Index of a string in a list as an option,'None()' if it's not in the list
def getIndexOf(l: List[String], v: String): Option[Int] = {
  try {
    var found: Bool = false 
    var index: Int = -1
    while (found == false) {
      index = index + 1
      if (l.get[String](index) == v) {
        found = true
      }
    }
    return Some(index)
  } with Exception[OutOfBounds] {
    def raise(exception: OutOfBounds, msg: String) = return None()
  }
}


/// Gets the first Index of the first occurence of any string in list as an option,'None()' if none of them are in the list
def getIndexOf(l: List[String], vs: List[String]): Option[Int] = {
  try {
    var found: Bool = false 
    var index: Int = -1
    while (found == false) {
      index = index + 1
      if (vs.contains(l.get[String](index))) {
        found = true
      }
    }
    return Some(index)
  } with Exception[OutOfBounds] {
    def raise(exception: OutOfBounds, msg: String) = return None()
  }
}


/// Removes the first occurence of a value from the list
def remove(l: List[String], v: String): List[String] = {
  try {
    var output: List[String] = l
    var index: Int = -1
    while (index != output.size) {
      index = index + 1
      if(l.get[String](index) == v) {
        output = output.deleteAt(index)
      }
    }
    return output
  } with Exception[OutOfBounds] {
  def raise(exception: OutOfBounds, msg: String) = []
  }
}


/// Checks if a value is in the list
def contains(l:List[String], v: String): Bool = {
  try {
    var found: Bool = false
    var index: Int = -1
    while (found == false) {
      index = index + 1
      if (l.get[String](index) == v) {
        found = true
      }
    }
    return found
  } with Exception[OutOfBounds] {
  def raise(exception: OutOfBounds, msg: String) = return false
  }
} 