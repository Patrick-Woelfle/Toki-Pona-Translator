module translateSentences

import src/syntaxTree
import src/additionalListFunctions
import src/constructSyntaxTree
import src/effects
import src/translateWords


/// Goes through Syntax Tree and translates the leafs into english
def convertSyntaxTree(tree: SyntaxTree): SyntaxTree / { ambiguity[Plural], notThirdPersonSingular } = {
  tree match {
    case Sentence(subjects, predicates) => {
      return Sentence(subjects.map{ x => translateLeaf(x)}, predicates.map{ x => convertSyntaxTree(x)})
    }
    case Predicate(verb, objects, prepositions) => {
      return Predicate(translateLeaf(verb), objects.map{ x => translateLeaf(x)}, prepositions.map{ x => translateLeaf(x)})
    }
    case _ => return Empty()
  }
}

/// Translates the leafs of a Syntax Tree into english
def translateLeaf(tree: SyntaxTree): SyntaxTree / { ambiguity[Plural], notThirdPersonSingular } = {
  tree match {
    case SubjectLeaf(head, modifiers) => {
      return SubjectLeaf(head.translateList(Subject()), modifiers.translateList(Modifier()))
    }
    case VerbLeaf(preverbs, head, modifiers) => {
      return VerbLeaf(preverbs.translateList(Preverb()), head.translateList(Verb()), modifiers.translateList(Adverb()))
    }
    case ObjectLeaf(head, modifiers) => {
      return ObjectLeaf(head.translateList(Object()), modifiers.translateList(Modifier()))
    }
    case PrepositionsLeaf(prepositions, head, modifiers) => {
      return PrepositionsLeaf(prepositions.translateList(Preposition()), head.translateList(Object()), modifiers.translateList(Modifier()))
    }
    case _ => return Empty()
  }
}

def main(): Unit = {
  try {
    val tree = constructSyntaxTree(["", "moku", "e", "kili"])
    val translatedTree = convertSyntaxTree(tree)
  printSyntaxTree(translatedTree)
  } with ambiguity[Plural] { (first, second) =>
    println("resume first:")
    resume(first)
    println("resume second:")
    resume(second)
  } with notThirdPersonSingular {
    resume(())
  }
}