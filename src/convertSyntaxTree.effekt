module translateSentences

import src/syntaxTree
import src/additionalListFunctions
import src/constructSyntaxTree
import src/effects
import src/translateWords


/// Goes through Syntax Tree and translates the leafs into english
def traverseTree(tree: SyntaxTree): SyntaxTree / ambiguity[Plural] = {
  try {
    do additionalContext("a")
    tree match {
      case Sentence(subjects, predicates) => {
        return Sentence(subjects.extraMap{ x => translateLeaf(x)}, predicates.extraMap{ x => traverseTree(x)})
      }
      case Predicate(verb, objects, prepositions) => {
        return Predicate(translateLeaf(verb), objects.extraMap{ x => translateLeaf(x)}, prepositions.extraMap{ x => translateLeaf(x)})
      }
      case _ => return Empty()
    }
  } with additionalContext { context => 
    resume(())
  }
}

/// Translates the leafs of a Syntax Tree into english
def translateLeaf(tree: SyntaxTree): SyntaxTree / ambiguity[Plural] = {
  tree match {
    case SubjectLeaf(head, modifiers) => {
      return SubjectLeaf(head.extraMap{x => translate(x, Subject())}, modifiers.extraMap{x => translate(x, Modifier())})
    }
    case VerbLeaf(preverbs, head, modifiers) => {
      return VerbLeaf(preverbs.extraMap{x => translate(x, Preverb())}, head.extraMap{x => translate(x, Verb())}, modifiers.extraMap{x => translate(x, Adverb())})
    }
    case ObjectLeaf(head, modifiers) => {
      return ObjectLeaf(head.extraMap{x => translate(x, Object())}, modifiers.extraMap{x => translate(x, Modifier())})
    }
    case PrepositionsLeaf(prepositions, head, modifiers) => {
      return PrepositionsLeaf(prepositions.extraMap{x => translate(x, Preposition())}, head.extraMap{x => translate(x, Object())}, modifiers.extraMap{x => translate(x, Modifier())})
    }
    case _ => return Empty()
  }
}

def main(): Unit = {
  try {
    val tree = splitSentence(["", "moku", "e", "kili"])
    val translatedTree = traverseTree(tree)
  printTree(translatedTree)
  } with ambiguity[Plural] { (first, second) =>
    println("resume first:")
    resume(first)
    println("resume second:")
    resume(second)
  }
}