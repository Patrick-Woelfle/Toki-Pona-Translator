module effects

import src/syntaxTree
import io/console


def askQuestion(question: String): String / { Console } = {
  do writeLine(question)
  do readLine()
}


/// Used to append something to a Syntax Tree
effect append(l: SyntaxTree): Unit


type Context {
  Subject()
  Object()
  Verb()
  Preposition()
  Modifier()
  Preverb()
  Adverb()
}

type AmbiguityTypes {
  Plural()
  Singular()
  FirstMeaning()
  SecondMeaning()
}

type SubjectPerson {
  First()
  NotThird()
}

/// Used when toki pona word is used in wrong context
effect wrongContext(msg: String, context: Context): Nothing

/// Used when word isn't known
effect unknownWord(word: String): Nothing

/// Used to signal an error in the sentence
effect sentenceError(msg: String): Nothing


/// Used when Sentence has multiple translations
effect ambiguity(ambiguities: List[(String, AmbiguityTypes)]): String

/// Used when part of the sentence could be the verb or an object
effect ambiguityVerbOnlyLi(): Bool


/// Used to escape context of multiple resumptions
effect escapeContext(msg: String): Unit


/// Used to add a word to a sentence
effect addToSentence(msg: String): Unit

/// Used to signal, that the next word should be negated
effect negateNext(negateNext: Bool): Unit


// Used to temporarily store a string
effect hold(storedValue: String): Unit

// Used to retrieve the temporarily stored string
effect release(): String


/// Sets the subject person of a sentence
effect setSubjectPerson(person: SubjectPerson): Unit

effect newAmbiguity(first: String, second: String, third: String, fourht: String): String


def main(): Unit = {
  with console;
  println(askQuestion("a"))
}