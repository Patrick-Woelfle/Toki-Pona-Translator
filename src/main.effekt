module main // must be named same as the file!

import src/lib

effect treeError(message: String): Unit


type Tree {
  Leaf(value: String);
  Node(left: Tree, value: String, right: Tree)
}

def getLeft(node: Tree): Tree / treeError= {
  node match {
    case Leaf(value) => do treeError("Excpectet Node, found Leaf"); Leaf(value)  
    case Node(left, value, right) => left
  }
}

def getValue(node: Tree): String / treeError = {
  node match {
    case Leaf(leafValue) => leafValue
    case Node(left, value, right) => value
  }
}

def getRight(node: Tree): Tree / treeError = {
  node match {
    case Leaf(value) => do treeError("Excpectet Node, found Leaf"); Leaf(value)  
    case Node(left, value, right) => right
  }
}
//
//def findPhrases(sentence: List[String]): List[String] = {
//  return [findSubject(sentence), findPredicate(sentence), findObject(sentence)]
//}
//
def findPredicate(sentence: List[String]): String = {
  <>
}

def findObject(sentence: List[String]): String = {
  <>
} 

def findSubject(sentence: List[String]): String = {
  if (subjectMiOrSina(sentence)) {
    <>
  }
  <>
}
 //sentence[List[String]].all[String]{x =>  isLi(x)}) {
def containsLi(sentence: List[String]): Bool = {
  return sentence.all { x => x != "li" }
}

def subjectMiOrSina(sentence: List[String]): Bool = {
  try {
  //with on[OutOfBounds].panic
    if (sentence.get[String](0) == "mi") {
          return true
    }
    else { 
      return false
    } 
  } with Exception[OutOfBounds] { // TODO: Proper Error Handling for invalid sentences
      def raise(exception: OutOfBounds, msg: String) = panic()
  }  
}
 

def main(): Unit = {
  val l: List[String] = Cons("mi", Cons("b", Cons("c", Nil())))
  println("a")
  if (subjectMiOrSina(l)) {
    println("A")
  }
}