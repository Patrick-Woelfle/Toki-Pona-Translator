module main

import src/constructSyntaxTree
import src/deconstructSyntaxTree
import src/effects
import io/console
import src/convertSyntaxTree
import src/syntaxTree
import io/filesystem
import io/error


def translateSentenceHelper(sentence: String): String / { ambiguity, ambiguityVerbOnlyLi }  = {
  deconstructSyntaxTree(convertSyntaxTree(constructSyntaxTree(split(sentence, " "))))
}


/// Translate a toki pona sentence to english, giving out all possible translations
def translateSentence(sentence: String): List[String] = {
  var output = []
  try {
    try {
      do escapeContext(translateSentenceHelper(sentence))
    } with ambiguity{ ambiguities =>
      ambiguities.foreach[(String, AmbiguityTypes)] { x => resume(x.first)}
    } with ambiguityVerbOnlyLi {
      resume(true)
      resume(false)
    }
  } with escapeContext { msg =>
    output = output.insert(0, msg)
    resume(())
  }
  return output
}




def safeToFile(): Unit = {
  try {
    var text = readFile("Data.txt").split("\n")
    var output = ""
    text.foreach { y => translateSentence(y).foreach { x => output = output ++ x ++ "\n" }}
    writeFile("Data.txt", output)
  }
  with Exception[IOError] {
    def raise(exception: IOError, msg: String) = {
      println(msg)
    }
  }
}


def main(): Unit = {
  safeToFile()
}