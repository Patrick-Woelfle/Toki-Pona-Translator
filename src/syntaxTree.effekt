module trees // must be named same as the file!

import src/additionalListFunctions

type SyntaxTree {
  Empty()
  Sentence(subjects: List[SyntaxTree], predicates: List[SyntaxTree])
  Predicate(verb: SyntaxTree, objects: List[SyntaxTree], prepositions: List[SyntaxTree])
  ModifierLeaf(head: List[String], modifiers: List[String])
  AdverbLeaf(head: List[String], modifiers: List[String])
  TokiPonaVerbLeaf(preverb: List[String], head: List[String], modifiers: List[SyntaxTree])
  EnglishVerbLeaf(preverb: List[String], head: List[String], modifiers: List[SyntaxTree], negation: String)
  ObjectLeaf(head: List[String], modifiers: List[SyntaxTree])
  SubjectLeaf(head: List[String], modifiers: List[SyntaxTree])
  PrepositionsLeaf(prep:List[String], head: List[String], modifiers: List[SyntaxTree])
  AdjectiveLeaf(head: List[String])
}


/// Prints out a syntax
def printSyntaxTree(node: SyntaxTree): Unit = {
  def printNode(node: SyntaxTree, indent: String): Unit = {
    node match {
      case Sentence(subjects, predicates) => {
        println(indent ++ "SENTENCE:")
        println(indent ++ "  " ++ "SUBJECTS:")
        subjects.foreach{ n => printNode(n, indent ++ "    ")}
        println(indent ++ "  " ++ "PREDICATES:")
        predicates.foreach{ n => printNode(n, indent ++ "    ")}
     }
     case ModifierLeaf(head, modifiers) => {
      modifiers match {
        case Nil() => println(indent ++ "ModifierLeaf: HEAD: " ++ showSentence(head))
        case _ => println(indent ++ "ModifierLeaf: HEAD: " ++ showSentence(head) ++ "  Modifiers: " ++ showSentence(modifiers))
      }
     }
     case AdverbLeaf(head, modifiers) => {
      modifiers match {
        case Nil() => println(indent ++ "Adverb: HEAD: " ++ showSentence(head))
        case _ => println(indent ++ "AdverbLeaf: HEAD: " ++ showSentence(head) ++ "  Modifiers: " ++ showSentence(modifiers))
      }
     }
      case SubjectLeaf(head, modifiers) => {
        println(indent ++ "SUBJECTLEAF:")
        println(indent ++ "  " ++ "Head: " ++ showSentence(head))
        println(indent ++ "  " ++ "MODIFIERS:")
        modifiers.foreach{ n => printNode(n, indent ++ "    ")}
      }
      case ObjectLeaf(head, modifiers) => {
        println(indent ++ "OBJECTLEAF:")
        println(indent ++ "  " ++ "Head: " ++ showSentence(head))
        println(indent ++ "  " ++ "MODIFIERS:")
        modifiers.foreach{ n => printNode(n, indent ++ "    ")}
      }
      case TokiPonaVerbLeaf(preverb, head, modifiers) => {
        println(indent ++ "TOKIPONAVERBLEAF:")
        println(indent ++ "  " ++ "Preverbs: " ++ showSentence(preverb))
        println(indent ++ "  " ++ "Head: " ++ showSentence(head))
        println(indent ++ "  " ++ "MODIFIERS:")
        modifiers.foreach{ n => printNode(n, indent ++ "    ")}
      }
      case PrepositionsLeaf(prep, head, modifiers) => {
        println(indent ++ "PREPOSITIONSLEAF:")
        println(indent ++ "  " ++ "Preposition: " ++ showSentence(prep))
        println(indent ++ "  " ++ "Head: " ++ showSentence(head))
        println(indent ++ "  " ++ "MODIFIERS:")
        modifiers.foreach{ n => printNode(n, indent ++ "    ")}
      }
      case Predicate(verb, objects, prepositions) => {
        println(indent ++ "PREDICATE:")
        printNode(verb, indent ++ "  ")
        objects match {
          case Nil() => println(indent ++ "  " ++ "OBJECTLEAF: Empty")
          case Cons(_, _) => objects.foreach{ n => printNode(n, indent ++ "  ")}
        }
        prepositions match {
          case Nil() => println(indent ++ "  " ++ "PREPOSITIONSLEAF: Empty")
          case Cons(_, _) => prepositions.foreach{ n => printNode(n, indent ++ "  ")}
        }
      }
      case AdjectiveLeaf(head) => {
        println(indent ++ "ADJECTIVELEAF: " ++ showSentence(head))
      }
      case EnglishVerbLeaf(preverb, head, modifiers, negation) => {
        println(indent ++ "ENGLISHVERBLEAF:")
        println(indent ++ "  " ++ "Preverbs: " ++ showSentence(preverb))
        println(indent ++ "  " ++ "Head: " ++ showSentence(head))
        println(indent ++ "  " ++ "MODIFIERS:")
        println(indent ++ "  " ++ "Negate: " ++ show(negation))
        modifiers.foreach{ n => printNode(n, indent ++ "    ")}
      }
      case Empty() => {
        println(indent ++ "Empty")
      }
   }
  } 
  printNode(node, "")
}

def main(): Unit = {
  val tree1: SyntaxTree = Sentence([SubjectLeaf(["Soweli"], [ModifierLeaf(["pimeja"], [])]), SubjectLeaf(["Soweli"], [ModifierLeaf(["pimeja"], [])])], [Predicate(TokiPonaVerbLeaf([], ["lili"], [ModifierLeaf(["pimeja"], [])]), [], [PrepositionsLeaf(["lon"], [], [])])])
  //var tree2: SyntaxTree = Sentence([], [])
  //tree2 = appendToSentence(tree2, SubjectLeaf(["Soweli"], ["pimeja"]))
  //printSyntaxTree(tree2.appendToSentence(SubjectLeaf(["Soweli"], ["pimeja"])))
  //printSyntaxTree(tree2.appendToSentence(SubjectLeaf(["Soweli"], ["pimeja"])).appendToSentence(SubjectLeaf(["Soweli"], ["pimeja"])))
  //printSyntaxTree(tree2.appendToSentence(Predicate(Empty(), [Empty()], [Empty()])))
  printSyntaxTree(tree1)
}