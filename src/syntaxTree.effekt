module trees // must be named same as the file!

import src/additionalListFunctions

type SyntaxTree {
  Empty()
  Sentence(subjects: List[SyntaxTree], predicates: List[SyntaxTree])
  Predicate(verb: SyntaxTree, objects: List[SyntaxTree], prepositions: List[SyntaxTree])
  VerbLeaf(preverb: List[String], head: List[String], modifiers: List[String])
  ObjectLeaf(head: List[String], modifiers: List[String])
  SubjectLeaf(head: List[String], modifiers: List[String])
  PrepositionsLeaf(prep:List[String], head: List[String], modifiers: List[String])
}

/// Prints out a syntax
def printSyntaxTree(node: SyntaxTree): Unit = {
  def printNode(node: SyntaxTree, indent: String): Unit = {
    node match {
      case Sentence(subjects, predicates) => {
        println(indent ++ "SENTENCE:")
        println(indent ++ "  " ++ "SUBJECTS:")
        subjects.foreach{ n => printNode(n, indent ++ "    ")}
        println(indent ++ "  " ++ "PREDICATES:")
        predicates.foreach{ n => printNode(n, indent ++ "    ")}
     }
      case SubjectLeaf(head, modifiers) => {
      println(indent ++ "SUBJECTLEAF: Head: " ++ showSentence(head) ++ "  Modifiers: " ++ showSentence(modifiers))
      }
      case ObjectLeaf(head, modifiers) => {
        println(indent ++ "OBJECTLEAF: Head: " ++ showSentence(head) ++ "  Modifiers: " ++ showSentence(modifiers))
      }
      case VerbLeaf(preverb, head, modifiers) => {
        println(indent ++ "VERBLEAF: Preverbs: " ++ showSentence(preverb) ++ "  Head: " ++ showSentence(head) ++ "  Modifiers: " ++ showSentence(modifiers))
      }
      case PrepositionsLeaf(prep, head, modifiers) => {
        println(indent ++ "PREPOSITIONSLEAF: Preposition: " ++ showSentence(prep) ++ "  Head: " ++ showSentence(head) ++ "  Modifiers: " ++ showSentence(modifiers))
      }
      case Predicate(verb, objects, prepositions) => {
        println(indent ++ "PREDICATE:")
        printNode(verb, indent ++ "  ")
        objects match {
          case Nil() => println(indent ++ "  " ++ "OBJECTLEAF: Empty")
          case Cons(_, _) => objects.foreach{ n => printNode(n, indent ++ "  ")}
        }
        prepositions match {
          case Nil() => println(indent ++ "  " ++ "PREPOSITIONSLEAF: Empty")
          case Cons(_, _) => prepositions.foreach{ n => printNode(n, indent ++ "  ")}
        }
      }
      case Empty() => {
        println(indent ++ "Empty")
      }
   }
  } 
  printNode(node, "")
}

def main(): Unit = {
  //val tree1: SyntaxTree = Sentence([SubjectLeaf(["Soweli"], ["pimeja"]), SubjectLeaf(["Soweli"], ["pimeja"])], [Predicate(VerbLeaf([], ["lili"], ["suli", "pimeja"]), [Empty()], [PrepositionsLeaf(["lon"], [], [])])])
  //var tree2: SyntaxTree = Sentence([], [])
  //tree2 = appendToSentence(tree2, SubjectLeaf(["Soweli"], ["pimeja"]))
  //printSyntaxTree(tree2.appendToSentence(SubjectLeaf(["Soweli"], ["pimeja"])))
  //printSyntaxTree(tree2.appendToSentence(SubjectLeaf(["Soweli"], ["pimeja"])).appendToSentence(SubjectLeaf(["Soweli"], ["pimeja"])))
  //printSyntaxTree(tree2.appendToSentence(Predicate(Empty(), [Empty()], [Empty()])))
  //printSyntaxTree(tree1)
  println("a")
}