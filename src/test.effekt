module src/test

import test
import src/constructSyntaxTree
import src/syntaxTree
import src/effects
import src/deconstructSyntaxTree


def main() = {
  try {
    mainSuite("Toki Pona Translator") {
      test("Construc Tree: simple sentence") {
        val l: List[String] = ["soweli", "li", "moku", "e", "moku"]
        val t: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
        assertEqual(constructSyntaxTree(l), t)
      }
      test("Construct Tree: sentence with complicated subject") {
        val l: List[String] = ["soweli", "pimeja", "suli", "en", "soweli", "li", "moku", "e", "moku"]
        val t: SyntaxTree =  Sentence([SubjectLeaf(["soweli"], ["pimeja", "suli"]), SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
        assertEqual(constructSyntaxTree(l), t)
      }
      test("Construct Tree: sentence with complicae predicate") {
        val l: List[String] = ["soweli", "li", "wile", "moku", "pona", "e", "moku", "lili", "e", "kasi", "kepeken", "uta", "lili", "kepeken", "luka", "li", "moku", "e", "moku", "suli"]
        val t: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf(["wile"], ["moku"], ["pona"]), [ObjectLeaf(["moku"], ["lili"]), ObjectLeaf(["kasi"], [])], [PrepositionsLeaf(["kepeken"], ["uta"], ["lili"]), PrepositionsLeaf(["kepeken"], ["luka"], [])]), Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], ["suli"])], [])])
        assertEqual(constructSyntaxTree(l), t)
      }
      test("Deconstruct Tree: simple sentence") {
        val s1: String = deconstructSyntaxTree(constructSyntaxTree(["soweli", "li", "moku", "e", "moku"]))
        val s2: String = "animal eats food "
        assertEqual(s1, s2)
      }
      test("Deconstruct Tree: simple sentence") {
        val s1: String = deconstructSyntaxTree(constructSyntaxTree(["soweli", "pimeja", "suli", "li", "moku", "pona", "e", "jan", "ale", "e", "kili", "kepeken", "uta", "suli"]))
        val s2: String = "dark big animal eats well all person and plant using big mouth "
        assertEqual(s1, s2)
      }
    }
  } with ambiguity[Plural] { (first, second) =>
    resume(first)
  } with ambiguityVerbOnlyLi {
    resume(true)
  }
}