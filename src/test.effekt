module src/test

import test
import src/buildTree
import src/trees
import src/translateSentences
import src/effects
import src/deconstructTree


def main() = {
  try {
    mainSuite("Toki Pona Translator") {
      try {
        test("Build Tree: simple sentence") {
          val l: List[String] = ["soweli", "li", "moku", "e", "moku"]
          val t: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
          assertEqual(splitSentence(l), t)
        }
      } with ambiguity[Plural] { (first, second) =>
        resume(first)
      } 
    }
  } with ambiguity[Plural] { (first, second) =>
    resume(first)
  }
}