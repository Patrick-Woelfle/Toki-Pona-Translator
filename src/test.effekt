module src/test

import test
import src/buildTree
import src/trees


def main() = { 
  mainSuite("Toki Pona Translator") {
    test("build Tree: simple sentence") {
      val l1: List[String] = ["soweli", "li", "moku", "e", "moku"]
      val t1: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
      assertEqual(splitSentence(l1), t1)
    }
    test("build Tree: sentence with complicated subject") {
      val l2: List[String] = ["soweli", "pimeja", "suli", "en", "soweli", "li", "moku", "e", "moku"]
      val t2: SyntaxTree =  Sentence([SubjectLeaf(["soweli"], ["pimeja", "suli"]), SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
      assertEqual(splitSentence(l2), t2)
    }
    test("build Tree: sentence with complicae predicate") {
      val l1: List[String] = ["soweli", "li", "wile", "moku", "pona", "e", "moku", "lili", "e", "kasi", "kepeken", "uta", "lili", "kepeken", "luka", "li", "moku", "e", "moku", "suli"]
      val t1: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf(["wile"], ["moku"], ["pona"]), [ObjectLeaf(["moku"], ["lili"]), ObjectLeaf(["kasi"], [])], [PrepositionsLeaf(["kepeken"], ["uta"], ["lili"]), PrepositionsLeaf(["kepeken"], ["luka"], [])]), Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], ["suli"])], [])])
      assertEqual(splitSentence(l1), t1)
    }
  }
}