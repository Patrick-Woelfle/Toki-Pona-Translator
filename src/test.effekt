module src/test

import test
import src/buildTree
import src/trees
import src/translateSentences


def main() = { 
  mainSuite("Toki Pona Translator") {
    test("Build Tree: simple sentence") {
      val l: List[String] = ["soweli", "li", "moku", "e", "moku"]
      val t: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
      assertEqual(splitSentence(l), t)
    }
    test("Build Tree: sentence with complicated subject") {
      val l: List[String] = ["soweli", "pimeja", "suli", "en", "soweli", "li", "moku", "e", "moku"]
      val t: SyntaxTree =  Sentence([SubjectLeaf(["soweli"], ["pimeja", "suli"]), SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
      assertEqual(splitSentence(l), t)
    }
    test("Build Tree: sentence with complicae predicate") {
      val l: List[String] = ["soweli", "li", "wile", "moku", "pona", "e", "moku", "lili", "e", "kasi", "kepeken", "uta", "lili", "kepeken", "luka", "li", "moku", "e", "moku", "suli"]
      val t: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf(["wile"], ["moku"], ["pona"]), [ObjectLeaf(["moku"], ["lili"]), ObjectLeaf(["kasi"], [])], [PrepositionsLeaf(["kepeken"], ["uta"], ["lili"]), PrepositionsLeaf(["kepeken"], ["luka"], [])]), Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], ["suli"])], [])])
      assertEqual(splitSentence(l), t)
    }
    test("Translate Sentence: simple sentence") {
      val t1: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
      val t2: SyntaxTree = Sentence([SubjectLeaf(["animal"], [])], [Predicate(VerbLeaf([], ["eat"], []), [ObjectLeaf(["food"], [])], [])])
      assertEqual(traverseTree(t1), t2)
    }
    test("Translate Sentence: sentence with complicated subject") {
      val t1: SyntaxTree = Sentence([SubjectLeaf(["soweli"], ["pimeja", "suli"]), SubjectLeaf(["soweli"], ["suli", "pimeja"])], [Predicate(VerbLeaf([], ["moku"], []), [ObjectLeaf(["moku"], [])], [])])
      val t2: SyntaxTree = Sentence([SubjectLeaf(["animal"], ["dark", "big"]), SubjectLeaf(["animal"], ["big", "dark"])], [Predicate(VerbLeaf([], ["eat"], []), [ObjectLeaf(["food"], [])], [])])
      assertEqual(traverseTree(t1), t2)
    }
    test("Translate Sentence: sentence with complicated predicate") {
      val t1: SyntaxTree = Sentence([SubjectLeaf(["soweli"], [])], [Predicate(VerbLeaf(["wile"], ["moku"], ["pona"]), [ObjectLeaf(["moku"], ["pona"])], [PrepositionsLeaf(["kepeken"], ["kili"], ["moku"])])])
      val t2: SyntaxTree = Sentence([SubjectLeaf(["animal"], [])], [Predicate(VerbLeaf(["want to"], ["eat"], ["well"]), [ObjectLeaf(["food"], ["good"])], [PrepositionsLeaf(["using"], ["plant"], ["food related"])])])
      assertEqual(traverseTree(t1), t2)
    }
  }
}