module translate 

import src/lib
import src/trees
import src/additionalLists
import src/buildTree


def traverseTree(tree: SyntaxTree): SyntaxTree = {
  tree match {
    case Node2(label, first, second) => {
      Node2(label, traverseTree(first), traverseTree(second))
    }
    case Node1(label, first) => {
      Node1(label, traverseTree(first))
    }
    case Leaf(label, value) => {
      label match {
        case "Noun Phrase" => Leaf(label, translateNounPhrase(value))
        case "Verb Phrase" => Leaf(label, translateVerbPhrase(value))
        case _ => Leaf(label, value)
      }
    }
    case _ => {
      Empty()
    }
  }
}


def translateNounPhrase(nounPhrase: List[String]): List[String] = {
  if (nounPhrase.size() == 1) {
    return translate(nounPhrase.headOption(), "noun") match {
      case Some(translation) => [translation]
      case None() => []
    }
  }
  else return ["a"]
}



def translateVerbPhrase(verbPhrase: List[String]): List[String] = {
  if (verbPhrase.size() == 1) {
    return translate(verbPhrase.headOption(), "verb") match {
      case Some(translation) => [translation]
      case None() => []
    }
  }
  else return ["a"]
}

def translate(word: Option[String], context: String): Option[String] = {
  word match {
    case Some("mi") => {
      if (context == "adjektiv") { 
        return Some("my")
      } else if  (context == "noun") {
        return Some("I")
      } else return None()
    }
    case Some("moku") => {
      context match {
        case "verb" => Some("eat")
        case "adjective" => Some("food related")
        case "noun" => Some("food")
        case _ => None()
      }
    }
    case _ => {return None()}
  }
}