module translateWords

import src/trees
import src/additionalLists
import src/effects
import src/findNearestWord

type Context {
  Subject()
  Object()
  Verb()
  Preposition()
  Modifier()
  Preverb()
  Adverb()
}



/// Translates single Words from Toki Pona to English using context given by other functions
/// TODO: All Words, ambigous translations, dealing with unknown Words
def translate(word: String, context: Context): String / { ambiguity[Plural] } = {
  try {
    word match {
      /// Pronouns
      case "mi" => {
        context match {
          case Subject() => "I"
          case Object() => "me"
          case Modifier() => "my"
          case _ => do wrongContext("mi"); ""
        }
      }
      case "ona" => {
        context match {
          case Subject() => "they"
          case Object() => "they"
          case Modifier() => "their"
          case _ => do wrongContext("ona"); ""
        }
      }
      /// Prepositions
      case "kepeken" => {
        context match {
          case Preposition() => "using"
          case _ => do wrongContext("kepeken"); ""
        }
      }
      case "ala" => {
        context match {
          case Preposition() => "not"
          case Subject() => "nothing"
          case Object() => "nothing"
          case Modifier() => "not"
          case _ => do wrongContext("ala"); ""
        }
      }
      /// Preverbs
      case "wile" => {
        context match {
          case Verb() => "want"
          case Preverb() => "want to"
          case _ => do wrongContext("wile"); ""
        }
      }
      /// Random Words
      case "ale" => {
        context match {
          case Subject() => "everything"
          case Object() => "everything"
          case Modifier() => "all"
          case _ => do wrongContext("ale"); ""
        }
      }
      case "moku" => {
        context match {
          case Subject() => "food"
          case Object() => "food"
          case Verb() => "eat"
          case Modifier() => "food related"
          case _ => do wrongContext("moku"); ""
        }
      }

      case "jan" => {
        context match {
          case Subject() => do ambiguity[Plural]("person", "people")
          case Object() => do ambiguity[Plural]("person", "people")
          case Verb() => "anthropomorphize"
          case Modifier() => "human"
          case _ => do wrongContext("jan"); ""
        }
      }
      case "kalama" => {
        context match {
          case Subject() => "sound"
          case Object() => "sound"
          case Verb() => "make sound"
          case Modifier() => "sound related"
          case _ => do wrongContext("kalama"); ""
        }
      }
      case "kili" => {
        context match {
          case Subject() => do ambiguity[Plural]("plant", "plants")
          case Object() => do ambiguity[Plural]("plant", "plants")
          case Verb() => "plant"
          case Modifier() => "plant related"
          case _ => do wrongContext("kili"); ""
        }
      }
      case "uta" => {
        context match {
          case Subject() => "mouth"
          case Object() => "mouth"
          case Verb() => "mouth"
          case Modifier() => "mouth related"
          case _ => do wrongContext("uta"); ""
        }
      }
      case "soweli" => {
        context match {
          case Subject() => do ambiguity[Plural]("animal", "animals")
          case Object() => do ambiguity[Plural]("animal", "animals")
          case Modifier() => "animal related"
          case _ => do wrongContext("soweli"); ""
        }
      }
      case "pimeja" => {
        context match {
          case Subject() => "darkness"
          case Object() => "darkness"
          case Verb() => "darken"
          case Modifier() => "dark"
          case _ => do wrongContext("pimeja"); ""
        }
      }
      case "suli" => {
        context match {
          case Verb() => "enlarge"
          case Modifier() => "big"
          case _ => do wrongContext("suli"); ""
        }
      }
      case "pona" => {
        context match {
          case Subject() => "Goodness"
          case Object() => "Goodness"
          case Verb() => "improve"
          case Modifier() => "good"
          case Adverb() => "well"
          case _ => do wrongContext("pona"); ""
        }
      }
      case unknownWord => do unknownWord(unknownWord); ""
    }
  } with unknownWord { word =>
    println("UNKNOWN WORD: " ++ word)
    ""
  } with wrongContext { msg =>
    println("WRONG CONTEXT: " ++ msg)
    ""
  }
}




def main(): Unit = {
  try {
    translate("soweli", Subject()) match {
      case word => println(word)
    }
  } with ambiguity[Plural] { (first, second) =>
    println("resume first:")
    resume(first)
    println("resume second:")
    resume(second)
  }
}