module main // must be named same as the file!

import src/lib

effect treeError(message: String): Unit


type SyntaxTree {
  Leaf(label: String, value: List[String]);
  Node1(label: String, first: SyntaxTree)
  Node2(label: String, first: SyntaxTree, second: SyntaxTree)
  Node3(label: String, first: SyntaxTree, second: SyntaxTree, third: SyntaxTree)
  Node4(label: String, first: SyntaxTree, second: SyntaxTree, third: SyntaxTree, fourth: SyntaxTree)
}

def getfirst(node: SyntaxTree): SyntaxTree / treeError= {
  node match {
    case Leaf(label, value) => do treeError("Excpectet Node4, found Leaf"); Leaf(label, value)  
    case Node4(label, first, second, third, fourth) => first
    case _ => Leaf("a", ["b"])
  }
}

def getLabel(node: SyntaxTree): String / treeError = {
  node match {
    case Leaf(label, value) => label 
    case Node4(label, first, second, third, fourth) => label
    case _ => "a"
  }
}

def getValue(leaf: SyntaxTree): List[String] / treeError = {
  leaf match {
    case Leaf(label, value) => value
    case Node4(label, first, second, third, fourth) => do treeError("Excpectet Leaf, found Node4"); Nil()
    case _ => ["a"]
  }
} 

def getSecond(node: SyntaxTree): SyntaxTree / treeError = {
  node match {
    case Leaf(label, value) => do treeError("Excpectet Node4, found Leaf"); Leaf(label, value)  
    case Node4(label, first, second, third, fourth) => second
    case _ => Leaf("a", ["b"])
  }
}

def getThird(node: SyntaxTree): SyntaxTree / treeError = {
  node match {
    case Leaf(label, value) => do treeError("Excpectet Node4, found Leaf"); Leaf(label, value)  
    case Node4(label, first, second, third, fourth) => third
    case _ => Leaf("a", ["b"])
  }
}

def getFourth(node: SyntaxTree): SyntaxTree / treeError = {
  node match {
    case Leaf(label, value) => do treeError("Excpectet Node4, found Leaf"); Leaf(label, value)  
    case Node4(label, first, second, third, fourth) => fourth
    case _ => Leaf("a", ["b"])
  }
}



def main(): Unit = {
  val tree1: SyntaxTree = Node2("Sentence", Node1("NP", Leaf("Noun", ["Soweli"])), Node2("VP", Leaf("Pred", ["moli"]), Node1("NP", Leaf("Noun", ["Soweli"]))));
  val l1: List[String] = ["mi", "sona", "mute", "e", "toki", "pona"]
  val l2: List[String] = ["mama", "ona", "li", "sona", "mute", "e", "toki", "pona"]
  println("yes")
}