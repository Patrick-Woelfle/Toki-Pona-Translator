module trees // must be named same as the file!

import src/additionalLists

type SyntaxTree {
  Empty()
  Sentence(subjects: SyntaxTree, predicates: SyntaxTree);
  PhraseList(label: String, front: SyntaxTree, back: SyntaxTree);
  Predicate(verb: SyntaxTree, objects: SyntaxTree, predicates: SyntaxTree)
  ObjectLeaf(label: String, prep: String, head: String, modifiers: List[String]);
  VerbLeaf(label: String, preverb: List[String], verb: String, modifiers: List[String]);
}

def append(sentence: SyntaxTree, node: SyntaxTree): SyntaxTree = {
  sentence match {
    case Sentence(subjects, predicates) => {
      node match {
        case ObjectLeaf(label, prep, head, list) => {
          if (label == "Subject Phrase") {
            return Sentence(append(subjects, node), predicates)
          } else {
            return Empty()
          }
        }
        case Predicate(verb, objects, prepositions) => {
          return Sentence(subjects, append(predicates, node))
        }
        case _ => return Empty()}
    }
    case PhraseList(label, front, back) => {
      front match {
        case Empty() => {
          return PhraseList(label, node, back)
        }
        case _ => back match {
          case Empty() => return PhraseList(label, front, PhraseList("List", node, Empty()))
          case _ => return PhraseList(label, front, append(back, node))
        }
      }
    }
    case _ => return Empty()
  }
}


def appendObjects(sentence: SyntaxTree, node: SyntaxTree): SyntaxTree = {
  sentence match {
    case PhraseList(label, front, back) => {
      front match {
        case Empty() => {
          return PhraseList(label, node, back)
        }
        case _ => back match {
          case Empty() => return PhraseList(label, front, PhraseList("List", node, Empty()))
          case _ => return PhraseList(label, front, append(back, node))
        }
      }
    }
    case _ => return Empty()
  }
}
    




def printTree(node: SyntaxTree): Unit = {
  def printNode(node: SyntaxTree, indent: String): Unit = {
    node match {
      case Sentence(subjects, predicates) => 
        println(indent ++ "Sentence")
        printNode(subjects, indent ++ "  ")
        printNode(predicates, indent ++ "  ")
      case PhraseList(label, front, back) => 
        println(indent ++ label)
        printNode(front, indent ++ "  ")
        printNode(back, indent ++ "  ")
      case ObjectLeaf(label, prep, head, modifiers) =>
        println(indent ++ label  ++ prep ++ head ++ showWords(modifiers))
      case Predicate(verb, objects, predicates) => {
        println(indent ++ "Predicate")
        printNode(verb, indent ++ "  ")
        printNode(objects, indent ++ "  ")
        printNode(predicates, indent ++ "  ")
      }
      case VerbLeaf(label, preverb, verb, modifiers) =>
        println(indent ++ label ++ ": " ++ showWords(preverb) ++ verb ++ showWords(modifiers))
      case Empty() => println(indent ++ "Empty")
      /// case _ => println(indent ++ "Unknown node")
    }
  }
  printNode(node, "")
}